/*Linked-List Librairy h doc ver: 1.0.0
Author: Ethan Bargaud-Arm*/ 
#ifndef LISTE_H
#define LISTE_H

//Définition:
//
typedef struct Liste Liste;
//Element generique du type void
typedef struct Element Element;

struct Liste
{
    Element* head;
};

struct Element
{
    void* data;
    Element* next;
};

//Innitialise une liste
Liste* innitialiserListe();

//Ajoute un element a la fin d'une liste
void ajouterFinElementListe(Liste* list,void*elem);

//Ajoute un element au debut d'une liste
void ajouterDebutElementListe(Liste* list,void*elem);

//Retourne le nombre d'element dans la liste
int compterElementListe(Liste* list);

//Supprime le dernier element et retourne le pointeur sur data de celui-ci
void* supprimerFinElementListe(Liste* list);

//Supprime le premier element et retourne le pointeur sur data de celui-ci
void* supprimerDebutElementListe(Liste* list);

//Supprime l'element a l'emplacement indiqué et retourne le pointeur sur data de celui-ci
void* supprimerNbrElementListe(Liste* list,int position);

//Lit le premier élément de la liste (et retourne le pointeur sur data de celui-ci ?)
void* lireDebutElementListe(Liste* List);

//Lit le dernier élément de la liste (et retourne le pointeur sur data de celui-ci ?)
void* lireFinElementListe(Liste* List);

//Lit l'élément à l'emplacement indiqué (et retourne le pointeur sur data de celui-ci ?)
void* lireNbrElementListe(Liste* List, int position);

//Supprime une liste
void supprimerListe(Liste* List);

//Trouve un élément supprimé d'une liste
void trouverSupprimerElementListe(Liste* List, void* objet);

//Trouve un élément dans une liste
int trouverNbrElementListe(Liste* List, void* objet);


//A definir avant l'include de list.
#ifdef _LIST_ADVANCED_ERROR
//Definie le comportement a adopter face a une erreur pour chaque type d'erreur
void changerCmpError(int newCmp[6]);
#endif //_LIST_ADVANCED_ERROR



#endif // !LISTE_H