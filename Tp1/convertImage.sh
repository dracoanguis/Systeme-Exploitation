#!/usr/bin/env bash

#Basic error function which write to the stderr stream and respond the error code 1
function error()
{
    printf "$1" >&2
    exit 1 #Error end of the program
}

#Test if really an image and create a correct name for it
function imgSelect()
{
    local TYPE=$(file -i "$1")

    if [[ $TYPE =~ ": image/" ]]; then #Changed condition because of base directory name, old: "image/"

        #Clear the base name
        local BASE=$(basename "$1")
        local EXT="${BASE##*.}"
        local BASE="${BASE%.*}"
        local CLEARED=$(echo "$BASE" | sed "s/[' '',]//g") #Striping the name of space coma and apostrophe

        #return value, Only it is not declared local to be able to use it outside of the function
        TRUENAME="$DEST$CLEARED.png"

        return 0
    fi

    return 1
}

#Start of program
if [ $# -lt 2 ]; then #Test for minimum arguments
    error "$0: Not enought arguments\n"
elif [ $# -eq 2 ] || [ $# -eq 3 ]; then #Test for right number of args
    if [ ! -e $1 ]; then #Test of existance
        error "$0: $1: No such directory\n"
    elif [ ! -d $1 ]; then #Test if directory
        error "$0: $1 is not a directory\n"
    else
        DEST="$2/" #Naming for use in function, the / is ignored if already there
        if [ ! -e $2 ]; then
            mkdir $2
        elif [ ! -d $2 ]; then
            error "$0: $1 is not a directory\n"
        fi
        for FICHIER in $1* ; do #Try on every file in specified directory
            imgSelect "$FICHIER" #Verification if it's true image and cleaning it's name
            if [ $? -eq 0 ]; then #Try for return code 0 if image, 1 if not
                if [ $# -eq 3 ]; then
                    #False because there is other geometries than juste resolution.
                    # VALID="^[0-9]+x[0-9]+$" #Regex expression for validating last parameter
                    # if [[ $3 =~ $VALID ]]; then
                    #     #printf "$FICHIER -> $3 $TRUENAME\n" #For progression
                    #     convert -resize "$3" "$FICHIER" "$TRUENAME" #Conversion from imagemagick
                    # else
                    #     error "$0: $3 is not a valid argument\n"
                    # fi
                    convert -resize "$3" "$FICHIER" "$TRUENAME"
                else
                    #printf "$FICHIER -> $TRUENAME\n" #For progression
                    convert "$FICHIER" "$TRUENAME"
                fi
            fi 
        done
        exit 0 #Succesful end of the program
    fi
else
    error "$0: Too much argument were given\n"
fi
